//
//  Home.swift
//  GrabCutIOS
//
//  Created by Noah Gallant on 7/6/17.
//  Copyright Â© 2017 EunchulJeon. All rights reserved.
//

import UIKit
import Foundation
import Vision
import ImageIO

class ViewController: UIViewController, UIImagePickerControllerDelegate, UINavigationControllerDelegate {
    
    @IBOutlet weak var imageView: UIImageView!
    
    var _rectangles: [CGRect]!
    var _faces: [UIImage]!
    
    @IBAction func takePicture(_ sender: Any) {
        let picker = UIImagePickerController()
        picker.delegate = self
        picker.sourceType = .camera
        picker.cameraCaptureMode = .photo
        present(picker, animated: true)
    }
    @IBAction func chooseImage(_ sender: Any) {
        // The photo library is the default source, editing not allowed
        let picker = UIImagePickerController()
        picker.delegate = self
        picker.sourceType = .savedPhotosAlbum
        present(picker, animated: true)
    }
    
    var inputImage: CIImage! // The image to be processed.
    
    func imagePickerController(_ picker: UIImagePickerController, didFinishPickingMediaWithInfo info: [String : Any]) {
        picker.dismiss(animated: true)
        
        guard let uiImage = info[UIImagePickerControllerOriginalImage] as? UIImage
            else { fatalError("no image from image picker") }
        guard let ciImage = CIImage(image: uiImage)
            else { fatalError("can't create CIImage from UIImage") }
        let orientation = CGImagePropertyOrientation(uiImage.imageOrientation)
        inputImage = ciImage.applyingOrientation(Int32(orientation.rawValue))
        
        // Show the image in the UI.
        imageView.image = uiImage
        
        // Run the rectangle detector, which upon completion runs the GrabCut
        let handler = VNImageRequestHandler(ciImage: ciImage, orientation: Int32(orientation.rawValue))
        DispatchQueue.global(qos: .userInteractive).async {
            do {
                try handler.perform([self.rectanglesRequest])
            } catch {
                print(error)
            }
        }
    }
    
    
    func grabCut(){ //GrabCut function takes face rectangles generated by rectanglesRequest and cuts out the faces
        let gb = GrabCutWrapper()
        _faces = []
        for rec in _rectangles{
            _faces.append(gb.doGrabcut(imageView.image, foregroundBound: rec))
        }
    }
    
    lazy var rectanglesRequest: VNDetectFaceRectanglesRequest = {
        return VNDetectFaceRectanglesRequest(completionHandler: self.handleRectangles)
    }()
    func handleRectangles(request: VNRequest, error: Error?) {
        guard let observations = request.results as? [VNRectangleObservation]
            else { fatalError("unexpected result type from VNDetectRectanglesRequest") }
        
        _rectangles = []
        
        for d in observations{
           _rectangles.append(d.boundingBox)
        }
        if(!_rectangles.isEmpty){
            DispatchQueue.main.async {
                self.grabCut()
            }
        }
    }
    
}


